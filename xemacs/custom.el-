(custom-set-variables
 '(pmd-java-home "/usr/java/j2sdk1.4.0/bin/java")
 '(jde-gen-cflow-for (quote ("(if (jde-parse-comment-or-quoted-p)" " '(l \"for\")" " '(l '> \"for\" jde-gen-conditional-padding-1 " " \"(\" jde-gen-conditional-padding-2 (p \"for-clause: \" clause) " "       jde-gen-conditional-padding-2 \")\"" " (if jde-gen-k&r " "   jde-gen-conditional-padding-3 " "  'n)" " \"{\"'>'n'>'r'n" " \"}\"" " (if jde-gen-comments " "  '(l \"    // end of for ( \" (s clause) \" )\"))" " '>'n'>)" " )")))
 '(pmd-home "~/SamSix/lib/tools/pmd")
 '(jde-javadoc-describe-constructor-template (quote ("*    Creates a new " (jde-javadoc-code name) " instance.")))
 '(jde-gen-cflow-catch (quote ("(if (jde-parse-comment-or-quoted-p)" " '(l \"catch\")" " '(l '> \"catch\" jde-gen-conditional-padding-1  " " \"(\" jde-gen-conditional-padding-2 (p \"catch what: \" clause) \" ex\"" "       jde-gen-conditional-padding-2 \")\"" " (if jde-gen-k&r " "   jde-gen-conditional-padding-3 " "  'n)" " \"{\"'>'n'>'r'n" " \"}\"" " (if jde-gen-comments " "  '(l \"    // end of catch\"))" " '>'n'>)" " )")))
 '(jde-wiz-import-excluded-packages (quote ("bsh.*" "classes.*" "com.sun.*")))
 '(paren-mode (quote sexp) nil (paren))
 '(jde-javadoc-return-tag-template (quote ("*    @return " (jde-javadoc-a type) " " (jde-javadoc-code type) " value")))
 '(jde-gen-cflow-enable nil)
 '(jde-check-option-allow-tabs t)
 '(jde-run-option-heap-size (quote ((4 . "megabytes") (16 . "megabytes"))))
 '(jde-db-option-vm-args nil)
 '(jde-gen-cflow-else (quote ("(if (jde-parse-comment-or-quoted-p)" " '(l \"else\")" " '(l '> \"else\"" " (if jde-gen-k&r " "   jde-gen-conditional-padding-3 " "  '>'n)" " \"{\"'>'n'>'r'n" " \"}\"" " (if jde-gen-comments " "  '(l \"    // end of else\"))" " '>'n'>)" " )")))
 '(jde-javadoc-describe-class-template (quote ("*    Describe class " (jde-javadoc-code name) " here.")))
 '(compilation-error-regexp-systems-list (quote (ibm aix)))
 '(jde-gen-cflow-try-finally (quote ("(if (jde-parse-comment-or-quoted-p)" " '(l \"try\")" " '(l '> \"try \"" " (if jde-gen-k&r " "  ()" "  'n)" " \"{\"'>'n'>'r'n" " \"}\" '>" " (if jde-gen-k&r " "   jde-gen-conditional-padding-3 " "  'n)" " \"catch\" jde-gen-conditional-padding-1 " " \"(\" jde-gen-conditional-padding-2 (p \"catch what: \" clause) \" e\"" "       jde-gen-conditional-padding-2 \")\" '>" " (if jde-gen-k&r " "   jde-gen-conditional-padding-3 " "  'n)" " \"{\"'>'n'>'r'n" " \"}\" '> " " (if jde-gen-k&r " "   jde-gen-conditional-padding-3 " "  'n)" " \"finally\" '>" " (if jde-gen-k&r " "   jde-gen-conditional-padding-3 " "  'n)" " \"{\"'>'n'>'r'n" " \"}\"" " (if jde-gen-comments " "  '(l \"    // end of try-finally\"))" " '>'n'>)" " )")))
 '(jde-global-classpath (quote ("/home/tc/SamSix/classes")))
 '(jde-run-option-verbose (quote (nil nil nil)))
 '(jde-javadoc-describe-field-template (quote ("*    Describe " (jde-javadoc-field-type modifiers) " " (jde-javadoc-code name) " here.")))
 '(column-number-mode t)
 '(jde-javadoc-param-tag-template (quote ("*    @param " name " " (jde-javadoc-a type) " " (jde-javadoc-code type) " value")))
 '(jde-checker-class "com.puppycrawl.tools.checkstyle.Main -p /home/tc/SamSix/lib/tools/checkstyle.properties")
 '(jde-check-option-allow-noauthor t)
 '(jde-gen-comments nil)
 '(jde-checker-classpath (quote ("/home/tc/SamSix/lib/tools/checkstyle-all-2.3.jar")))
 '(recent-files-permanent-submenu t)
 '(jde-import-sorted-groups (quote asc))
 '(browse-url-browser-function (quote browse-url-kfm))
 '(jde-gen-cflow-if-else (quote ("(if (jde-parse-comment-or-quoted-p)" " '(l \"ife\")" " '(l '> \"if\" jde-gen-conditional-padding-1 " " \"(\" jde-gen-conditional-padding-2 (p \"if-clause: \" clause)" "       jde-gen-conditional-padding-2 \")\"" " (if jde-gen-k&r " "   jde-gen-conditional-padding-3 " "  '>'n)" " \"{\"'>'n'>'r'n" " \"}\" '>" " (if jde-gen-comments " "  '(l \"    //    end of if ( \" (s clause) \" )\" '>'n)" "  (if jde-gen-k&r " "   jde-gen-conditional-padding-3 " "   'n))" " '> \"else\"" " (if jde-gen-k&r " "   jde-gen-conditional-padding-3" "  '>'n)" " \"{\"'>'n'>'r'n" " \"}\"" " (if jde-gen-comments " "  '(l \"    //    end of if ( \" (s clause) \" ) else\"))" " '>'n'>)" " )")))
 '(jde-import-auto-sort t)
 '(jde-run-option-vm-args (quote ("-Dtop=/home/tc/SamSix" "-Dtop.log=/home/tc/SamSix/log" "-Dlog4j.configuration=file:/home/tc/SamSix/src/log4j.properties")))
 '(jde-check-option-javadoc-relax t)
 '(jde-gen-k&r nil)
 '(jde-db-option-classpath nil)
 '(jde-check-option-allow-protected t)
 '(jde-javadoc-describe-interface-template (quote ("*    Describe interface " (jde-javadoc-code name) " here.")))
 '(jde-sourcepath (quote ("/home/tc/SamSix/src" "/home/tc/SamSix/src/com/samsix/entity")))
 '(jde-gen-conditional-padding-2 " ")
 '(jde-javadoc-exception-tag-template (quote ("*    @exception " type " if an error occurs")))
 '(jde-compile-option-sourcepath (quote ("/home/tc/Samsix/src")))
 '(query-replace-highlight t)
 '(jde-gen-buffer-boilerplate nil)
 '(jde-imenu-include-signature nil)
 '(jde-mode-abbreviations (quote (("ab" . "abstract") ("bo" . "boolean") ("br" . "break") ("by" . "byte") ("byv" . "byvalue") ("cas" . "cast") ("ca" . "catch") ("ch" . "char") ("cl" . "class") ("co" . "const") ("con" . "continue") ("de" . "default") ("dou" . "double") ("el" . "else") ("fa" . "false") ("fin" . "finally") ("fl" . "float") ("fo" . "for") ("fu" . "future") ("ge" . "generic") ("go" . "goto") ("impl" . "implements") ("impo" . "import") ("ins" . "instanceof") ("in" . "int") ("inte" . "interface") ("lo" . "long") ("na" . "native") ("ne" . "new") ("nu" . "null") ("pa" . "package") ("pri" . "private") ("pro" . "protected") ("pu" . "public") ("re" . "return") ("sh" . "short") ("st" . "static") ("su" . "super") ("sw" . "switch") ("sy" . "synchronized") ("th" . "this") ("thr" . "throw") ("throw" . "throws") ("tra" . "transient") ("tr" . "true") ("vo" . "void") ("vol" . "volatile") ("wh" . "while"))))
 '(jde-gen-cflow-try-catch (quote ("(if (jde-parse-comment-or-quoted-p)" " '(l \"try\")" " '(l '> \"try \"" " (if jde-gen-k&r " "  ()" "  'n)" " \"{\"'>'n'>'r'n" " \"}\" '>" " (if jde-gen-k&r " "   jde-gen-conditional-padding-3 " "  'n)" " \"catch\" jde-gen-conditional-padding-1 " " \"( \" jde-gen-conditional-padding-2 (p \"catch what: \" clause) \" ex \"" "       jde-gen-conditional-padding-2 \")\" '>" " (if jde-gen-k&r " "   jde-gen-conditional-padding-3 " "  'n)" " \"{\"'>'n'>'r'n" " \"}\"" "  (if jde-gen-comments " " 	'(l \" //    end of try-catch\"))" " '>'n'>)" " )")))
 '(jde-enable-abbrev-mode nil)
 '(jde-imenu-sort (quote asc))
 '(compilation-always-signal-completion t)
 '(jde-read-check-args nil)
 '(frame-background-mode nil)
 '(jde-javadoc-describe-method-template (quote ("*    Describe " (jde-javadoc-code name) " method here.")))
 '(jde-imenu-include-classdef nil)
 '(jde-check-option-command-line-args "")
 '(jde-gen-cflow-else-if (quote ("(if (jde-parse-comment-or-quoted-p)" " '(l \"eif\")" " '(l '> \"else if\" jde-gen-conditional-padding-1 " " \"(\" jde-gen-conditional-padding-2 (p \"else-if-clause: \" clause) " "       jde-gen-conditional-padding-2 \")\"" " (if jde-gen-k&r " "  jde-gen-conditional-padding-3 " " '>'n)" " \"{\"'>'n'>'r'n" " \"}\"" " (if jde-gen-comments " "  '(l \"    // end of else if ( \" (s clause) \" )\"))" " '>'n'>)" " )")))
 '(jde-javadoc-see-tag-template (quote ("*     @see " ref)))
 '(bsh-vm-args (quote ("-Dtop=/home/tc/SamSix" "-Dtop.log=/home/tc/SamSix/log" "-DuseTrove=false")))
 '(user-mail-address "corbin@samsix.com")
 '(jde-gen-cflow-while (quote ("(if (jde-parse-comment-or-quoted-p)" " '(l \"while\")" " '(l '> \"while\" jde-gen-conditional-padding-1 " " \"(\" jde-gen-conditional-padding-2 (p \"while-clause: \" clause) " "       jde-gen-conditional-padding-2 \")\"" " (if jde-gen-k&r " "   jde-gen-conditional-padding-3 " "  '>'n)" " \"{\"'>'n'>'r'n" " \"}\"" " (if jde-gen-comments " "  '(l \"    // end of while ( \" (s clause) \" )\"))" " '>'n'>)" " )")))
 '(query-user-mail-address nil)
 '(pmd-rulesets "rulesets/basic.xml")
 '(jde-import-insert-group-names t)
 '(jde-gen-to-string-method-template (quote ("'&" "\"public String toString()\" 'n>" "\"{\" 'n>" "\"return super.toString();\" 'n>" "\"}\" 'n>"))))
(custom-set-faces
 '(default ((t (:family "Bitstream Vera Sans Mono" :foreground "wheat" :background "black" :size "15pt"))) t)
 '(widget-field-face ((((class grayscale color) (background light)) (:foreground "black" :background "gray85"))))
 '(font-lock-string-face ((((class color) (background dark)) (:foreground "green"))))
 '(custom-variable-tag-face ((((class color) (background light)) (:foreground "lightblue" :underline t))))
 '(font-lock-preprocessor-face ((((class color) (background light)) (:foreground "green4" :size "18pt" :bold t))))
 '(custom-comment-face ((((class grayscale color) (background light)) (:foreground "black" :background "gray85"))))
 '(paren-match ((t (:foreground "yellow" :background "darkblue"))) t)
 '(html-helper-link-face ((t (:foreground "red"))))
 '(font-lock-warning-face ((((class color) (background light)) (:foreground "Red" :size "10" :bold t))))
 '(font-lock-keyword-face ((((class color) (background light dark)) (:foreground "orange"))))
 '(font-lock-type-face ((((class color) (background light dark)) (:foreground "lightblue"))))
 '(bold ((t (:size "12" :bold t))) t)
 '(bold-italic ((t (:bold t :italic t))) t)
 '(primary-selection ((t (:foreground "black" :background "gray65"))) t)
 '(list-mode-item-selected ((t (:foreground "black" :background "gray68"))) t)
 '(font-lock-function-name-face ((nil (:size "12"))))
 '(isearch ((t (:foreground "green4" :background "paleturquoise"))) t)
 '(highlight ((t (:foreground "green4" :background "paleturquoise"))) t)
 '(zmacs-region ((t (:foreground "black" :background "gray65"))) t))
